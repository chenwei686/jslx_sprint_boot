<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.isprint.jslx.lccfd.dao.FdStudentExampaperReportMapper" >
  <resultMap id="BaseResultMap" type="com.isprint.jslx.lccfd.model.FdStudentExampaperReport" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="student_id" property="studentId" jdbcType="INTEGER" />
    <result column="exampaper_id" property="exampaperId" jdbcType="INTEGER" />
    <result column="exampaper_name" property="exampaperName" jdbcType="VARCHAR" />
    <result column="score" property="score" jdbcType="DECIMAL" />
    <result column="report" property="report" jdbcType="VARCHAR" />
    <result column="school_id" property="schoolId" jdbcType="INTEGER" />
    <result column="grade_id" property="gradeId" jdbcType="INTEGER" />
    <result column="classes_id" property="classesId" jdbcType="INTEGER" />
    <result column="year" property="year" jdbcType="CHAR" />
    <result column="average_score" property="averageScore" jdbcType="DECIMAL" />
    <result column="exceed_num" property="exceedNum" jdbcType="INTEGER" />
    <result column="total_num" property="totalNum" jdbcType="INTEGER" />
    <result column="beat_pro" property="beatPro" jdbcType="DECIMAL" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    <if test="fields == null" >
      id, student_id, exampaper_id, exampaper_name, score, report, school_id, grade_id, 
      classes_id, year, average_score, exceed_num, total_num, beat_pro, create_time
    </if>
    <if test="fields != null" >
      ${fields}
    </if>
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.isprint.jslx.lccfd.model.FdStudentExampaperReportQuery" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from fd_student_exampaper_report
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="startRow != null" >
      limit #{startRow} , #{pageSize}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    id,student_id,exampaper_id,exampaper_name,score,report,school_id,grade_id,classes_id,year,average_score,exceed_num,total_num,beat_pro,create_time
    from fd_student_exampaper_report
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from fd_student_exampaper_report
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.isprint.jslx.lccfd.model.FdStudentExampaperReportQuery" >
    delete from fd_student_exampaper_report
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.isprint.jslx.lccfd.model.FdStudentExampaperReport" >
    insert into fd_student_exampaper_report (id, student_id, exampaper_id, 
      exampaper_name, score, report, 
      school_id, grade_id, classes_id, 
      year, average_score, exceed_num, 
      total_num, beat_pro, create_time
      )
    values (#{id,jdbcType=INTEGER}, #{studentId,jdbcType=INTEGER}, #{exampaperId,jdbcType=INTEGER}, 
      #{exampaperName,jdbcType=VARCHAR}, #{score,jdbcType=DECIMAL}, #{report,jdbcType=VARCHAR}, 
      #{schoolId,jdbcType=INTEGER}, #{gradeId,jdbcType=INTEGER}, #{classesId,jdbcType=INTEGER}, 
      #{year,jdbcType=CHAR}, #{averageScore,jdbcType=DECIMAL}, #{exceedNum,jdbcType=INTEGER}, 
      #{totalNum,jdbcType=INTEGER}, #{beatPro,jdbcType=DECIMAL}, #{createTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.isprint.jslx.lccfd.model.FdStudentExampaperReport" >
    insert into fd_student_exampaper_report
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="studentId != null" >
        student_id,
      </if>
      <if test="exampaperId != null" >
        exampaper_id,
      </if>
      <if test="exampaperName != null" >
        exampaper_name,
      </if>
      <if test="score != null" >
        score,
      </if>
      <if test="report != null" >
        report,
      </if>
      <if test="schoolId != null" >
        school_id,
      </if>
      <if test="gradeId != null" >
        grade_id,
      </if>
      <if test="classesId != null" >
        classes_id,
      </if>
      <if test="year != null" >
        year,
      </if>
      <if test="averageScore != null" >
        average_score,
      </if>
      <if test="exceedNum != null" >
        exceed_num,
      </if>
      <if test="totalNum != null" >
        total_num,
      </if>
      <if test="beatPro != null" >
        beat_pro,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="studentId != null" >
        #{studentId,jdbcType=INTEGER},
      </if>
      <if test="exampaperId != null" >
        #{exampaperId,jdbcType=INTEGER},
      </if>
      <if test="exampaperName != null" >
        #{exampaperName,jdbcType=VARCHAR},
      </if>
      <if test="score != null" >
        #{score,jdbcType=DECIMAL},
      </if>
      <if test="report != null" >
        #{report,jdbcType=VARCHAR},
      </if>
      <if test="schoolId != null" >
        #{schoolId,jdbcType=INTEGER},
      </if>
      <if test="gradeId != null" >
        #{gradeId,jdbcType=INTEGER},
      </if>
      <if test="classesId != null" >
        #{classesId,jdbcType=INTEGER},
      </if>
      <if test="year != null" >
        #{year,jdbcType=CHAR},
      </if>
      <if test="averageScore != null" >
        #{averageScore,jdbcType=DECIMAL},
      </if>
      <if test="exceedNum != null" >
        #{exceedNum,jdbcType=INTEGER},
      </if>
      <if test="totalNum != null" >
        #{totalNum,jdbcType=INTEGER},
      </if>
      <if test="beatPro != null" >
        #{beatPro,jdbcType=DECIMAL},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.isprint.jslx.lccfd.model.FdStudentExampaperReportQuery" resultType="java.lang.Integer" >
    select count(*) from fd_student_exampaper_report
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update fd_student_exampaper_report
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.studentId != null" >
        student_id = #{record.studentId,jdbcType=INTEGER},
      </if>
      <if test="record.exampaperId != null" >
        exampaper_id = #{record.exampaperId,jdbcType=INTEGER},
      </if>
      <if test="record.exampaperName != null" >
        exampaper_name = #{record.exampaperName,jdbcType=VARCHAR},
      </if>
      <if test="record.score != null" >
        score = #{record.score,jdbcType=DECIMAL},
      </if>
      <if test="record.report != null" >
        report = #{record.report,jdbcType=VARCHAR},
      </if>
      <if test="record.schoolId != null" >
        school_id = #{record.schoolId,jdbcType=INTEGER},
      </if>
      <if test="record.gradeId != null" >
        grade_id = #{record.gradeId,jdbcType=INTEGER},
      </if>
      <if test="record.classesId != null" >
        classes_id = #{record.classesId,jdbcType=INTEGER},
      </if>
      <if test="record.year != null" >
        year = #{record.year,jdbcType=CHAR},
      </if>
      <if test="record.averageScore != null" >
        average_score = #{record.averageScore,jdbcType=DECIMAL},
      </if>
      <if test="record.exceedNum != null" >
        exceed_num = #{record.exceedNum,jdbcType=INTEGER},
      </if>
      <if test="record.totalNum != null" >
        total_num = #{record.totalNum,jdbcType=INTEGER},
      </if>
      <if test="record.beatPro != null" >
        beat_pro = #{record.beatPro,jdbcType=DECIMAL},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update fd_student_exampaper_report
    set id = #{record.id,jdbcType=INTEGER},
      student_id = #{record.studentId,jdbcType=INTEGER},
      exampaper_id = #{record.exampaperId,jdbcType=INTEGER},
      exampaper_name = #{record.exampaperName,jdbcType=VARCHAR},
      score = #{record.score,jdbcType=DECIMAL},
      report = #{record.report,jdbcType=VARCHAR},
      school_id = #{record.schoolId,jdbcType=INTEGER},
      grade_id = #{record.gradeId,jdbcType=INTEGER},
      classes_id = #{record.classesId,jdbcType=INTEGER},
      year = #{record.year,jdbcType=CHAR},
      average_score = #{record.averageScore,jdbcType=DECIMAL},
      exceed_num = #{record.exceedNum,jdbcType=INTEGER},
      total_num = #{record.totalNum,jdbcType=INTEGER},
      beat_pro = #{record.beatPro,jdbcType=DECIMAL},
      create_time = #{record.createTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.isprint.jslx.lccfd.model.FdStudentExampaperReport" >
    update fd_student_exampaper_report
    <set >
      <if test="studentId != null" >
        student_id = #{studentId,jdbcType=INTEGER},
      </if>
      <if test="exampaperId != null" >
        exampaper_id = #{exampaperId,jdbcType=INTEGER},
      </if>
      <if test="exampaperName != null" >
        exampaper_name = #{exampaperName,jdbcType=VARCHAR},
      </if>
      <if test="score != null" >
        score = #{score,jdbcType=DECIMAL},
      </if>
      <if test="report != null" >
        report = #{report,jdbcType=VARCHAR},
      </if>
      <if test="schoolId != null" >
        school_id = #{schoolId,jdbcType=INTEGER},
      </if>
      <if test="gradeId != null" >
        grade_id = #{gradeId,jdbcType=INTEGER},
      </if>
      <if test="classesId != null" >
        classes_id = #{classesId,jdbcType=INTEGER},
      </if>
      <if test="year != null" >
        year = #{year,jdbcType=CHAR},
      </if>
      <if test="averageScore != null" >
        average_score = #{averageScore,jdbcType=DECIMAL},
      </if>
      <if test="exceedNum != null" >
        exceed_num = #{exceedNum,jdbcType=INTEGER},
      </if>
      <if test="totalNum != null" >
        total_num = #{totalNum,jdbcType=INTEGER},
      </if>
      <if test="beatPro != null" >
        beat_pro = #{beatPro,jdbcType=DECIMAL},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.isprint.jslx.lccfd.model.FdStudentExampaperReport" >
    update fd_student_exampaper_report
    set student_id = #{studentId,jdbcType=INTEGER},
      exampaper_id = #{exampaperId,jdbcType=INTEGER},
      exampaper_name = #{exampaperName,jdbcType=VARCHAR},
      score = #{score,jdbcType=DECIMAL},
      report = #{report,jdbcType=VARCHAR},
      school_id = #{schoolId,jdbcType=INTEGER},
      grade_id = #{gradeId,jdbcType=INTEGER},
      classes_id = #{classesId,jdbcType=INTEGER},
      year = #{year,jdbcType=CHAR},
      average_score = #{averageScore,jdbcType=DECIMAL},
      exceed_num = #{exceedNum,jdbcType=INTEGER},
      total_num = #{totalNum,jdbcType=INTEGER},
      beat_pro = #{beatPro,jdbcType=DECIMAL},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>